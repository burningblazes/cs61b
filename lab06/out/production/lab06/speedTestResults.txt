I did 5 trials of size 5, 50, 500, 5000, 50000.
It is observed that when size is 50000, ULLMap spent more than 5 seconds to run, while it was only 0.1 second for BSTMap, proving the efficiency of BSTMap.


Enter # strings to insert into the maps: 5
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 50
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 500
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 5000
class ULLMap: 0.09 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 50000
class ULLMap: 5.69 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.00 sec
Would you like to try more timed-tests? (y/n)

